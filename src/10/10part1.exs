#!/usr/bin/env elixir
defmodule Puzzle10 do
  @moduledoc """
  --- Day 10: The Stars Align ---

  It's no use; your navigation system simply isn't capable of providing walking directions in the arctic circle, and
  certainly not in 1018.

  The Elves suggest an alternative. In times like these, North Pole rescue operations will arrange points of light in
  the sky to guide missing Elves back to base. Unfortunately, the message is easy to miss: the points move slowly enough
  that it takes hours to align them, but have so much momentum that they only stay aligned for a second. If you blink at
  the wrong time, it might be hours before another message appears.

  You can see these points of light floating in the distance, and record their position in the sky and their velocity,
  the relative change in position per second (your puzzle input). The coordinates are all given from your perspective;
  given enough time, those positions and velocities will move the points into a cohesive message!

  Rather than wait, you decide to fast-forward the process and calculate what the points will eventually spell.

  For example, suppose you note the following points:

  position=< 9,  1> velocity=< 0,  2>
  position=< 7,  0> velocity=<-1,  0>
  position=< 3, -2> velocity=<-1,  1>
  position=< 6, 10> velocity=<-2, -1>
  position=< 2, -4> velocity=< 2,  2>
  position=<-6, 10> velocity=< 2, -2>
  position=< 1,  8> velocity=< 1, -1>
  position=< 1,  7> velocity=< 1,  0>
  position=<-3, 11> velocity=< 1, -2>
  position=< 7,  6> velocity=<-1, -1>
  position=<-2,  3> velocity=< 1,  0>
  position=<-4,  3> velocity=< 2,  0>
  position=<10, -3> velocity=<-1,  1>
  position=< 5, 11> velocity=< 1, -2>
  position=< 4,  7> velocity=< 0, -1>
  position=< 8, -2> velocity=< 0,  1>
  position=<15,  0> velocity=<-2,  0>
  position=< 1,  6> velocity=< 1,  0>
  position=< 8,  9> velocity=< 0, -1>
  position=< 3,  3> velocity=<-1,  1>
  position=< 0,  5> velocity=< 0, -1>
  position=<-2,  2> velocity=< 2,  0>
  position=< 5, -2> velocity=< 1,  2>
  position=< 1,  4> velocity=< 2,  1>
  position=<-2,  7> velocity=< 2, -2>
  position=< 3,  6> velocity=<-1, -1>
  position=< 5,  0> velocity=< 1,  0>
  position=<-6,  0> velocity=< 2,  0>
  position=< 5,  9> velocity=< 1, -2>
  position=<14,  7> velocity=<-2,  0>
  position=<-3,  6> velocity=< 2, -1>

  Each line represents one point. Positions are given as <X, Y> pairs: X represents how far left (negative) or right
  (positive) the point appears, while Y represents how far up (negative) or down (positive) the point appears.

  At 0 seconds, each point has the position given. Each second, each point's velocity is added to its position. So, a
  point with velocity <1, -2> is moving to the right, but is moving upward twice as quickly. If this point's initial
  position were <3, 9>, after 3 seconds, its position would become <6, 3>.

  Over time, the points listed above would move like this:

  Initially:
  ........#.............
  ................#.....
  .........#.#..#.......
  ......................
  #..........#.#.......#
  ...............#......
  ....#.................
  ..#.#....#............
  .......#..............
  ......#...............
  ...#...#.#...#........
  ....#..#..#.........#.
  .......#..............
  ...........#..#.......
  #...........#.........
  ...#.......#..........

  After 1 second:
  ......................
  ......................
  ..........#....#......
  ........#.....#.......
  ..#.........#......#..
  ......................
  ......#...............
  ....##.........#......
  ......#.#.............
  .....##.##..#.........
  ........#.#...........
  ........#...#.....#...
  ..#...........#.......
  ....#.....#.#.........
  ......................
  ......................

  After 2 seconds:
  ......................
  ......................
  ......................
  ..............#.......
  ....#..#...####..#....
  ......................
  ........#....#........
  ......#.#.............
  .......#...#..........
  .......#..#..#.#......
  ....#....#.#..........
  .....#...#...##.#.....
  ........#.............
  ......................
  ......................
  ......................

  After 3 seconds:
  ......................
  ......................
  ......................
  ......................
  ......#...#..###......
  ......#...#...#.......
  ......#...#...#.......
  ......#####...#.......
  ......#...#...#.......
  ......#...#...#.......
  ......#...#...#.......
  ......#...#..###......
  ......................
  ......................
  ......................
  ......................

  After 4 seconds:
  ......................
  ......................
  ......................
  ............#.........
  ........##...#.#......
  ......#.....#..#......
  .....#..##.##.#.......
  .......##.#....#......
  ...........#....#.....
  ..............#.......
  ....#......#...#......
  .....#.....##.........
  ...............#......
  ...............#......
  ......................
  ......................

  After 3 seconds, the message appeared briefly: HI. Of course, your message will be much longer and will take many more seconds to appear.

  What message will eventually appear in the sky?
  """

  defp read_light_points_file() do
    {:ok, file_content} = File.read("input10.txt")

    file_content
    |> String.split("\n")
    |> Stream.map(&(String.split(&1, ["<", ",", ">"])))
    |> Stream.map(fn [_, px, py, _, vx, vy, _] -> [px, py, vx, vy] end)
    |> Stream.map(fn x -> Enum.map(x, &(String.to_integer(String.trim(&1)))) end)
    |> Enum.to_list()
  end

  defp update_positions(state), do: Enum.map(state, fn [px, py, vx, vy] -> [px+vx, py+vy, vx, vy] end)

  defp is_scrambled?(state) do
    state
    |> Enum.reduce(%{}, fn [px, _py, _vx, _vy], acc -> Map.update(acc, px, 1, &(&1+1)) end)
    |> Map.values()
    |> Enum.max()
    |> Kernel.<(20)
  end

  defp plot(state) do
    positions =
      state
      |> Enum.map(fn [px, py, _vx, _vy] -> [px, py] end)

    min_x =
      positions
      |> Enum.map(fn [px, _py] -> px end)
      |> Enum.min()

    min_y =
      positions
      |> Enum.map(fn [_px, py] -> py end)
      |> Enum.min()

    max_x =
      positions
      |> Enum.map(fn [px, _py] -> px end)
      |> Enum.max()

    max_y =
      positions
      |> Enum.map(fn [_px, py] -> py end)
      |> Enum.max()

    big_string =
      for y <- min_y..max_y,
          x <- min_x..max_x do
        if Enum.member?(positions, [x, y]) do
          "#"
        else
          "."
        end
      end

    big_string
    |> Enum.map_every(max_x-min_x, fn x -> x <> "\n" end)
    |> Enum.reduce(fn x, acc -> acc <> x end)
  end

  def solve do
    Stream.iterate(read_light_points_file(), &update_positions/1)
    |> Stream.drop(10000)
    |> Stream.drop_while(&is_scrambled?/1)
    |> Enum.take(1)
    |> List.first()
    |> plot()
  end
end

IO.puts Puzzle10.solve
